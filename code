#include <Arduino.h>
#include <LiquidCrystal.h>
#include <OneWire.h>
#include <DallasTemperature.h>
#include <Wire.h>
#include <ArduinoBLE.h>

// ==================== PIN DEFINITIONS ====================
#define LCD_RS 17
#define LCD_EN 16
#define LCD_D4 4
#define LCD_D5 5
#define LCD_D6 18
#define LCD_D7 19

#define LED_RED 27
#define LED_GREEN 26
#define LED_BLUE 25

#define TEMP_SENSOR_PIN 2     // E-201's DS18B20
#define TDS_SENSOR_PIN A3     // TDS
#define PH_SENSOR_PIN A6      // pH
#define TURBIDITY_PIN A2      // Turbidity
#define DO_I2C_ADDR 0x61      // Dissolved Oxygen I2C

// ==================== BLE SETUP ====================
BLEService waterService("19B10000-E8F2-537E-4F6C-D104768A1214");
BLEStringCharacteristic sensorChar("19B10001-E8F2-537E-4F6C-D104768A1214", BLERead | BLENotify, 100);
bool btConnected = false;
const char* btDeviceName = "WaterQualityMonitor";

// ==================== LCD INIT ====================
LiquidCrystal lcd(LCD_RS, LCD_EN, LCD_D4, LCD_D5, LCD_D6, LCD_D7);

// ==================== RGB LED ====================
namespace RGB_LED {
  void setColor(int r, int g, int b) {
    analogWrite(LED_RED, 255 - r);
    analogWrite(LED_GREEN, 255 - g);
    analogWrite(LED_BLUE, 255 - b);
  }

  void init() {
    pinMode(LED_RED, OUTPUT);
    pinMode(LED_GREEN, OUTPUT);
    pinMode(LED_BLUE, OUTPUT);
    setColor(0, 0, 0);
  }
}

// ==================== SENSOR NAMESPACES ====================

// -------------------- TDS SENSOR ---------------------------
namespace TDS_Sensor {
  float tdsValue = 0;
  float temperature = 25.0;

  void updateTemperature(float newTemp) {
    temperature = newTemp;
  }

  void loop() {
    static unsigned long lastSampleTime = 0;
    if (millis() - lastSampleTime > 20) {
      int rawReading = analogRead(TDS_SENSOR_PIN);
      float voltage = rawReading * 3.3 / 4096.0;
      float compVoltage = voltage / (1.0 + 0.02 * (temperature - 25.0));
      tdsValue = (750.0 * compVoltage); // Simplified TDS calculation
      lastSampleTime = millis();
    }
  }
}

-------------------- PH SENSOR --------------------

namespace PH_Sensor {
  float pHValue = 7.0;
  float temperature = 25.0;
  OneWire oneWire(TEMP_SENSOR_PIN);
  DallasTemperature tempSensor(&oneWire);

  void loop() {
    tempSensor.requestTemperatures();
    temperature = tempSensor.getTempCByIndex(0);

    int buffer[10];
    for (int i = 0; i < 10; i++) buffer[i] = analogRead(PH_SENSOR_PIN);
    float volt = (buffer[4] + buffer[5]) * 2.5 / 4096.0;
    pHValue = (-5.70 * volt) + 21.34; // Pre-calibrated for pH 7.0
  }
}

-------------------- TUBRIDITY SENSOR :3 --------------------

namespace Turbidity_Sensor {
  int turbidityValue = 0;

  void loop() {
    turbidityValue = analogRead(TURBIDITY_PIN);
  }
}

-------------------- DISSOLVED OXYGEN SENSOR UWU --------------------

namespace DO_Sensor {
  float doValue = 0.0;

  void loop() {
    Wire.requestFrom(DO_I2C_ADDR, 20);
    char response[20];
    byte len = Wire.readBytesUntil(0, response, 20);
    doValue = atof(response);
  }
}

// ==================== DISPLAY MANAGER ====================
namespace Display {
  void update() {
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("pH:");
    lcd.print(PH_Sensor::pHValue, 1);
    lcd.print(" TDS:");
    lcd.print(TDS_Sensor::tdsValue, 0);

    lcd.setCursor(0, 1);
    lcd.print("T:");
    lcd.print(PH_Sensor::temperature, 1);
    lcd.print("C DO:");
    lcd.print(DO_Sensor::doValue, 1);
  }
}

// ==================== MAIN PROGRAM ====================
void setup() {
  Serial.begin(115200);
  pinMode(LED_BUILTIN, OUTPUT);
  
  BLE.begin();
  BLE.setLocalName(btDeviceName);
  BLE.setAdvertisedService(waterService);
  waterService.addCharacteristic(sensorChar);
  BLE.addService(waterService);
  BLE.advertise();

  lcd.begin(16, 2);
  RGB_LED::init();
  Wire.begin();
}

void loop() {
  BLE.poll();
  
  PH_Sensor::loop();
  TDS_Sensor::loop();
  Turbidity_Sensor::loop();
  DO_Sensor::loop();
  
  Display::update();
  delay(1000);
}
